#!/usr/bin/python
# -*- coding: UTF-8 -*-

import sys, subprocess, string, commands, argparse, os
from Browter import BrowterConfig

def parseArgs():
	APPNAME = sys.argv[0]
	if sys.platform == 'darwin':
		from AppKit import NSSearchPathForDirectoriesInDomains
		# http://developer.apple.com/DOCUMENTATION/Cocoa/Reference/Foundation/Miscellaneous/Foundation_Functions/Reference/reference.html#//apple_ref/c/func/NSSearchPathForDirectoriesInDomains
		# NSApplicationSupportDirectory = 14
		# NSUserDomainMask = 1
		# True for expanding the tilde into a fully qualified path
		appdata = path.join(NSSearchPathForDirectoriesInDomains(14, 1, True)[0], APPNAME, 'default.sqlite')
	elif sys.platform == 'win32':
		appdata = os.path.join(environ['APPDATA'], APPNAME, 'default.sqlite')
	else:
		appdata = os.path.expanduser(os.path.join("~", "." + APPNAME, 'default.sqlite'))

	parser = argparse.ArgumentParser(description='browter routes urls to browsers based on your rules')
	parser.add_argument('urls', metavar='url', nargs=argparse.REMAINDER, help='the url(s) to open')
	parser.add_argument('--config', metavar='path/to/file.sqlite', dest='config_file', action='store', default=appdata, help='the config file to use')

	return parser.parse_args()

def main():

	args = parseArgs();

	url = args.urls[0]

	config = BrowterConfig.Config(args.config_file);

	domain = url.lstrip('htps:/');
	domain = domain.split("/")[0];
	print domain;

	if domain.startswith("www."):
		domain = domain.lstrip('w.');
		print domain;

	profile  = config.settings['default_browser'];
	profiles = config.browsers

	for p in profiles:
		if domain in config.browsers[p]:
			print "found it";
			break;

	cmd_ping_profile = "firefox -P %s -remote \"ping()\" &" % profile;

	print cmd_ping_profile;
	profile_running = subprocess.call(cmd_ping_profile, shell=True)
	if profile_running:
		cmd_open_url = "firefox -P %s -remote \"openurl(%s,new-tab)\" &" % (profile, url);
	else:
		cmd_open_url = "firefox -P %s --new-instance --new-tab %s &" % (profile, url);

	print cmd_open_url;
	subprocess.call(cmd_open_url, shell=True)
	sys.exit(0);

main();
